# AUTOGENERATED FROM 'app/queries/set_default_dev_data.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema

        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class SetDefaultDevDataResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    address: str | None
    schedule: datetime.datetime | None
    host_name: str


async def set_default_dev_data(
    executor: edgedb.AsyncIOExecutor,
    *,
    data: str,
) -> list[SetDefaultDevDataResult]:
    return await executor.query(
        """\
        delete Event;
        delete User;
        with data := <json>$data,
        for item in json_array_unpack(data) union (
        select (insert Event { name := <str>item['name'],
                               address := <optional str>item['address'] ?? <str>{},
                               schedule := <datetime>(<optional str>item['schedule'] ?? <str>{}), 
                               host := ( 
                                    with host_name:= <str>item['host_name'],
                                         u:= assert_single((select User filter .name = host_name))
                                    select 
                                    if exists u then (u)
                                    else (insert User {name:= host_name})
                                )
                }
        ) {name, address, schedule, host_name:=.host.name}
        );\
        """,
        data=data,
    )
